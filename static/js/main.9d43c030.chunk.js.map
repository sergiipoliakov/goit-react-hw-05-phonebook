{"version":3,"sources":["components/Button/Button.module.css","components/Layout/Layout.js","components/DublicateAlert/DublicateAlert.js","components/Button/Button.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","App.js","index.js"],"names":["module","exports","Layout","children","className","CSSTransition","in","appear","timeout","classNames","unmountOnExit","DublicateAlert","name","Button","label","type","onClick","styles","button","ContactForm","state","number","dublicateName","handleChange","e","target","value","setState","handleSubmit","preventDefault","props","contacts","filter","contact","elements","length","setTimeout","onAddContact","this","Boolean","onSubmit","onChange","Component","defaultProps","Filter","onChangeFilter","ContactListItem","id","onRemove","ContactList","onRemoveContact","TransitionGroup","component","map","App","addContact","data","uuid_v4","prevState","removeContact","contactId","changeFilter","getFilteredName","toLowerCase","includes","prevProps","localStorage","setItem","JSON","stringify","getItem","parsContacts","parse","filteredContacts","ReactDOM","render","document","getElementById"],"mappings":"8IACAA,EAAOC,QAAU,CAAC,OAAS,yB,0RCmBZC,EAfA,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACb,sBAAKC,UAAU,SAAf,UACE,cAACC,EAAA,EAAD,CACEC,IAAI,EACJC,QAAQ,EACRC,QAAS,IACTC,WAAW,uBACXC,eAAa,EALf,SAOE,oBAAIN,UAAU,eAAd,yBAEDD,M,MCbU,SAASQ,EAAT,GAA+C,IAAD,IAApBC,YAAoB,MAAb,UAAa,EAC3D,OACE,qBAAKR,UAAU,iBAAf,SACE,kCAAKQ,EAAL,gC,qBCGSC,EANA,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,IAAUC,YAAV,MAAiB,SAAjB,MAA2BC,eAA3B,MAAqC,kBAAM,MAA3C,SACb,wBAAQZ,UAAWa,IAAOC,OAAQH,KAAMA,EAAMC,QAASA,EAAvD,SACGF,KCGgBK,G,kNAanBC,MAAQ,CACNR,KAAM,GACNS,OAAQ,GACRC,eAAe,G,EAGjBC,aAAe,SAAAC,GAAM,IAAD,EACMA,EAAEC,OAAlBb,EADU,EACVA,KAAMc,EADI,EACJA,MAEd,EAAKC,SAAL,eACGf,EAAOc,K,EAIZE,aAAe,SAAAJ,GAMb,GALAA,EAAEK,iBAEgB,EAAKC,MAAMC,SAASC,QACpC,SAAAC,GAAO,OAAIA,EAAQrB,OAASY,EAAEC,OAAOS,SAAS,GAAGR,SAErCS,OAGZ,OAFA,EAAKR,SAAS,CAAEL,eAAgB,EAAKF,MAAME,gBAEpCc,YAAW,WAChB,EAAKT,SAAS,CACZL,eAAe,MAEhB,MAKL,EAAKQ,MAAMO,aAAa,EAAKjB,OAE7B,EAAKO,SAAS,CAAEf,KAAM,GAAIS,OAAQ,GAAIC,eAAe,K,4CAGvD,WAAU,IAAD,EACiCgB,KAAKlB,MAArCR,EADD,EACCA,KAAMS,EADP,EACOA,OAAQC,EADf,EACeA,cAEtB,OACE,qCACE,cAACjB,EAAA,EAAD,CACEC,GAAIgB,GAAiBiB,QAAQ3B,GAC7BH,WAAW,yBACXD,QAAS,IACTE,eAAa,EAJf,SAME,cAAC,EAAD,CAAgBE,KAAMA,MAGxB,uBAAM4B,SAAUF,KAAKV,aAAcxB,UAAU,OAA7C,UACE,wBAAOA,UAAU,aAAjB,iBAEE,uBACEA,UAAU,aACVW,KAAK,OACLW,MAAOd,EACP6B,SAAUH,KAAKf,aACfX,KAAK,YAIT,wBAAOR,UAAU,aAAjB,mBAEE,uBACEA,UAAU,aACVW,KAAK,MACLW,MAAOL,EACPoB,SAAUH,KAAKf,aACfX,KAAK,cAIT,cAAC,EAAD,CAAQE,MAAM,cAAcC,KAAK,qB,GAvFF2B,cAApBvB,EACZwB,aAAe,G,MCLT,SAASC,EAAT,GAA4C,IAA1BlB,EAAyB,EAAzBA,MAAOmB,EAAkB,EAAlBA,eACtC,OACE,qBAAKzC,UAAU,OAAf,SACE,wBAAOA,UAAU,aAAjB,iCAEE,uBACEW,KAAK,OACLX,UAAU,aACVsB,MAAOA,EACPe,SAAU,SAAAjB,GAAC,OAAIqB,EAAerB,EAAEC,OAAOC,eAOjDkB,EAAOD,aAAe,CACpBjB,MAAO,SACPL,OAAQ,a,YClBJyB,G,YAAkB,SAAC,GAAD,IAAGC,EAAH,EAAGA,GAAInC,EAAP,EAAOA,KAAMS,EAAb,EAAaA,OAAQ2B,EAArB,EAAqBA,SAArB,OACtB,qBAAa5C,UAAU,mBAAvB,UACE,oBAAGA,UAAU,mBAAb,UAAiCQ,EAAjC,QACA,mBAAGR,UAAU,mBAAb,SAAiCiB,IACjC,qBAAKjB,UAAU,sBAAf,SACE,cAAC,EAAD,CACEU,MAAM,SACNC,KAAK,SACLX,UAAU,qBACVY,QAASgC,QARND,KAcID,IAEfA,EAAgBH,aAAe,CAC7B/B,KAAM,SACNS,OAAQ,aCjBV,IAee4B,EAfK,SAAC,GAAD,IAAGlB,EAAH,EAAGA,SAAUmB,EAAb,EAAaA,gBAAb,OAClB,cAACC,EAAA,EAAD,CAAiBC,UAAU,KAAKhD,UAAU,cAA1C,SACG2B,EAASsB,KAAI,gBAAGN,EAAH,EAAGA,GAAInC,EAAP,EAAOA,KAAMS,EAAb,EAAaA,OAAb,OACZ,cAAChB,EAAA,EAAD,CAAwBG,QAAS,IAAKC,WAAW,wBAAjD,SACE,cAAC,EAAD,CACEsC,GAAIA,EACJnC,KAAMA,EACNS,OAAQA,EACR2B,SAAU,kBAAME,EAAgBH,OALhBA,SCDLO,E,4MACnBlC,MAAQ,CACNW,SAAU,GAMVC,OAAQ,GACRpB,KAAM,GACNS,OAAQ,I,EAkBVE,aAAe,SAAAC,GAAM,IAAD,EACMA,EAAEC,OAAlBb,EADU,EACVA,KAAMc,EADI,EACJA,MAEd,EAAKC,SAAL,eACGf,EAAOc,K,EAIZ6B,WAAa,SAAAC,GACX,IAAMvB,EAAU,CACdc,GAAIU,cACJ7C,KAAM4C,EAAK5C,KACXS,OAAQmC,EAAKnC,QAGf,EAAKM,UAAS,SAAA+B,GACZ,MAAO,CACL3B,SAAS,GAAD,mBAAM2B,EAAU3B,UAAhB,CAA0BE,S,EAIxC0B,cAAgB,SAAAC,GACd,EAAKjC,UAAS,SAAA+B,GACZ,MAAO,CACL3B,SAAU2B,EAAU3B,SAASC,QAAO,qBAAGe,KAAgBa,U,EAK7DC,aAAe,SAAA7B,GACb,EAAKL,SAAS,CAAEK,Y,EAGlB8B,gBAAkB,WAAO,IAAD,EACO,EAAK1C,MAA1BW,EADc,EACdA,SAAUC,EADI,EACJA,OAElB,OAAOD,EAASC,QAAO,SAAAC,GAAO,OAC5BA,EAAQrB,KAAKmD,cAAcC,SAAShC,EAAO+B,mB,wDArD/C,SAAmBE,EAAWP,GACxBpB,KAAKlB,MAAMW,WAAa2B,EAAU3B,UACpCmC,aAAaC,QAAQ,WAAYC,KAAKC,UAAU/B,KAAKlB,MAAMW,a,+BAI/D,WACE,IAAMA,EAAWmC,aAAaI,QAAQ,YAEhCC,EAAeH,KAAKI,MAAMzC,GAE5BwC,GACFjC,KAAKX,SAAS,CAAEI,SAAUwC,M,oBA6C9B,WAAU,IAAD,EACsBjC,KAAKlB,MAA1BY,EADD,EACCA,OAAQD,EADT,EACSA,SAEV0C,EAAmBnC,KAAKwB,kBAE9B,OACE,eAAC,EAAD,WACE,cAAC,EAAD,CAAazB,aAAcC,KAAKiB,WAAYxB,SAAUA,IACrDA,EAASI,OAAS,GACjB,cAAC9B,EAAA,EAAD,CACEC,IAAI,EACJC,QAAQ,EACRC,QAAS,IACTC,WAAW,uBACXC,eAAa,EALf,SAOE,oBAAIN,UAAU,iBAAd,wBAGJ,cAACC,EAAA,EAAD,CACEC,GAAIyB,EAASI,OAAS,EACtB3B,QAAS,IACTC,WAAW,wBACXC,eAAa,EAJf,SAME,cAAC,EAAD,CAAQgB,MAAOM,EAAQa,eAAgBP,KAAKuB,iBAG9C,cAAC,EAAD,CACE9B,SAAU0C,EACVvB,gBAAiBZ,KAAKqB,uB,GAnGCjB,aCHjCgC,IAASC,OACP,mCACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.9d43c030.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3QF_k\"};","import PropTypes from 'prop-types';\nimport { CSSTransition } from 'react-transition-group';\n\nimport './Layout.css';\n\nconst Layout = ({ children }) => (\n  <div className=\"Layout\">\n    <CSSTransition\n      in={true}\n      appear={true}\n      timeout={500}\n      classNames=\"Layout-title-slideIn\"\n      unmountOnExit\n    >\n      <h1 className=\"Layout-title\">Phonebook</h1>\n    </CSSTransition>\n    {children}\n  </div>\n);\n\nexport default Layout;\n\nLayout.propTypes = {\n  children: PropTypes.array.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport './DublicateAlert.css';\n\nexport default function DublicateAlert({ name = 'no name' }) {\n  return (\n    <div className=\"dublucate-name\">\n      <p>\"{name}\" is already in contacts</p>\n    </div>\n  );\n}\n\nDublicateAlert.propTypes = {\n  name: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport styles from './Button.module.css';\n\nconst Button = ({ label, type = 'button', onClick = () => null }) => (\n  <button className={styles.button} type={type} onClick={onClick}>\n    {label}\n  </button>\n);\n\nexport default Button;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport DublicateAlert from '../DublicateAlert/DublicateAlert';\nimport Button from '../Button/Button';\nimport { CSSTransition } from 'react-transition-group';\n\nimport './ContactForm.css';\n\nexport default class ContactForm extends Component {\n  static defaultProps = {};\n\n  static propTypes = {\n    contacts: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired,\n      }),\n    ),\n  };\n\n  state = {\n    name: '',\n    number: '',\n    dublicateName: false,\n  };\n\n  handleChange = e => {\n    const { name, value } = e.target;\n\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    const duplicate = this.props.contacts.filter(\n      contact => contact.name === e.target.elements[0].value,\n    );\n    if (duplicate.length) {\n      this.setState({ dublicateName: !this.state.dublicateName });\n\n      return setTimeout(() => {\n        this.setState({\n          dublicateName: false,\n        });\n      }, 2500);\n\n      // return alert(`${duplicate[0].name} is already in contacts`);\n    }\n\n    this.props.onAddContact(this.state);\n\n    this.setState({ name: '', number: '', dublicateName: false });\n  };\n\n  render() {\n    const { name, number, dublicateName } = this.state;\n\n    return (\n      <>\n        <CSSTransition\n          in={dublicateName && Boolean(name)}\n          classNames=\"dublucate-name-slideIn\"\n          timeout={250}\n          unmountOnExit\n        >\n          <DublicateAlert name={name} />\n        </CSSTransition>\n\n        <form onSubmit={this.handleSubmit} className=\"form\">\n          <label className=\"form-label\">\n            Name\n            <input\n              className=\"form-input\"\n              type=\"name\"\n              value={name}\n              onChange={this.handleChange}\n              name=\"name\"\n            />\n          </label>\n\n          <label className=\"form-label\">\n            Number\n            <input\n              className=\"form-input\"\n              type=\"tel\"\n              value={number}\n              onChange={this.handleChange}\n              name=\"number\"\n            />\n          </label>\n\n          <Button label=\"Add contact\" type=\"submit\" />\n        </form>\n      </>\n    );\n  }\n}\n","import PropTypes from 'prop-types';\nimport './Filter.css';\nimport { CSSTransition } from 'react-transition-group';\n\nexport default function Filter({ value, onChangeFilter }) {\n  return (\n    <div className=\"form\">\n      <label className=\"form-label\">\n        Find contact by name\n        <input\n          type=\"text\"\n          className=\"form-input\"\n          value={value}\n          onChange={e => onChangeFilter(e.target.value)}\n        />\n      </label>\n    </div>\n  );\n}\n\nFilter.defaultProps = {\n  value: 'noName',\n  number: '123 45 67',\n};\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n\n  onChangeFilter: PropTypes.func,\n};\n","import PropTypes from 'prop-types';\nimport Button from '../Button/Button';\nimport './ContactListItem.css';\n\nconst ContactListItem = ({ id, name, number, onRemove }) => (\n  <li key={id} className=\"ContactList-item\">\n    <p className=\"ContactList-text\">{name}: </p>\n    <p className=\"ContactList-text\">{number}</p>\n    <div className=\"ContactList-actions\">\n      <Button\n        label=\"Delete\"\n        type=\"button\"\n        className=\"ContactList-button\"\n        onClick={onRemove}\n      />\n    </div>\n  </li>\n);\n\nexport default ContactListItem;\n\nContactListItem.defaultProps = {\n  name: 'noName',\n  number: '123 45 67',\n};\n\nContactListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onRemove: PropTypes.func,\n};\n","import PropTypes from 'prop-types';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport './ContactList.css';\n\nimport ContactListItem from '../ContactListItem/ContactListItem';\n\nconst ContactList = ({ contacts, onRemoveContact }) => (\n  <TransitionGroup component=\"ul\" className=\"ContactList\">\n    {contacts.map(({ id, name, number }) => (\n      <CSSTransition key={id} timeout={250} classNames=\"ContactList-item-fade\">\n        <ContactListItem\n          id={id}\n          name={name}\n          number={number}\n          onRemove={() => onRemoveContact(id)}\n        />\n      </CSSTransition>\n    ))}\n  </TransitionGroup>\n);\n\nexport default ContactList;\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      number: PropTypes.string,\n      name: PropTypes.string,\n    }),\n  ),\n  onRemoveContact: PropTypes.func,\n};\n","import React, { Component } from 'react';\nimport { v4 as uuid_v4 } from 'uuid';\nimport Layout from './components/Layout';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport Filter from './components/Filter/Filter';\nimport ContactList from './components/ContactList/ContactList';\nimport { CSSTransition } from 'react-transition-group';\n\nexport default class App extends Component {\n  state = {\n    contacts: [\n      // { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      // { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      // { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      // { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    filter: '',\n    name: '',\n    number: '',\n  };\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.contacts !== prevState.contacts) {\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n    }\n  }\n\n  componentDidMount() {\n    const contacts = localStorage.getItem('contacts');\n\n    const parsContacts = JSON.parse(contacts);\n\n    if (parsContacts) {\n      this.setState({ contacts: parsContacts });\n    }\n  }\n\n  handleChange = e => {\n    const { name, value } = e.target;\n\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  addContact = data => {\n    const contact = {\n      id: uuid_v4(),\n      name: data.name,\n      number: data.number,\n    };\n\n    this.setState(prevState => {\n      return {\n        contacts: [...prevState.contacts, contact],\n      };\n    });\n  };\n  removeContact = contactId => {\n    this.setState(prevState => {\n      return {\n        contacts: prevState.contacts.filter(({ id }) => id !== contactId),\n      };\n    });\n  };\n\n  changeFilter = filter => {\n    this.setState({ filter });\n  };\n\n  getFilteredName = () => {\n    const { contacts, filter } = this.state;\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\n    );\n  };\n\n  render() {\n    const { filter, contacts } = this.state;\n\n    const filteredContacts = this.getFilteredName();\n\n    return (\n      <Layout>\n        <ContactForm onAddContact={this.addContact} contacts={contacts} />\n        {contacts.length > 0 && (\n          <CSSTransition\n            in={true}\n            appear={true}\n            timeout={500}\n            classNames=\"Layout-title-slideIn\"\n            unmountOnExit\n          >\n            <h1 className=\"contacts-title\">Contacts</h1>\n          </CSSTransition>\n        )}\n        <CSSTransition\n          in={contacts.length > 1}\n          timeout={500}\n          classNames=\"Layout-filter-slideIn\"\n          unmountOnExit\n        >\n          <Filter value={filter} onChangeFilter={this.changeFilter} />\n        </CSSTransition>\n\n        <ContactList\n          contacts={filteredContacts}\n          onRemoveContact={this.removeContact}\n        />\n      </Layout>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}